@use 'props';

.stacked-list {
	&--scroll {
		@include stacked-list-scroll-height;
		overflow-y: scroll;

		@media screen and (min-width: get-breakpoint(desktop)) {
			@include stacked-list-scroll-height(props.stacked-list-item(base, desktop), 7, base);
		}

		.stacked-list__wrapper--medium & {
			@include stacked-list-scroll-height(props.stacked-list-item(medium), 3);

			@media screen and (min-width: get-breakpoint(desktop)) {
				@include stacked-list-scroll-height(props.stacked-list-item(medium, desktop), 3, base);
			}
		}

		.stacked-list__wrapper--large & {
			@include stacked-list-scroll-height(props.stacked-list-item(large), 3);

			@media screen and (min-width: get-breakpoint(desktop)) {
				@include stacked-list-scroll-height(props.stacked-list-item(large, desktop), 3, base);
			}
		}
	}

	&__wrapper {
		&--medium {
			.stacked-list__header,
			.stacked-list__content {
				height: props.stacked-list-item(medium);

				@media screen and (min-width: get-breakpoint(desktop)) {
					height: props.stacked-list-item(medium, desktop);
				}
			}
		}

		&--large {
			.stacked-list__header,
			.stacked-list__content {
				height: props.stacked-list-item(large);

				@media screen and (min-width: get-breakpoint(desktop)) {
					height: props.stacked-list-item(large, desktop);
				}
			}
		}

		&--scroll-indicator {
			&::after {
				@include scroll-indicator;
			}

			&:hover {
				&::after {
					opacity: 0.1;
				}
			}
		}

		&--horizontal {
			display: flex;

			&::after {
				@include scroll-indicator(false);
			}

			// does not address :focus on child elements
			&:hover {
				&::after {
					opacity: 0.1;
				}
			}

			.stacked-list__header,
			.stacked-list__content {
				height: props.stacked-list-item();

				@media screen and (min-width: get-breakpoint(tablet)) {
					height: props.stacked-list-item(base, desktop);
				}
			}

			.stacked-list__header {
				flex: 0 0 props.stacked-list-item(large);

				@media screen and (min-width: get-breakpoint(tablet)) {
					flex-basis: props.stacked-list-item(large, desktop);
				}
			}

			.StackedList {
				display: flex;
				flex: 1 1 auto;
				margin-top: 0;
				margin-left: -(get-border(thin));
				overflow-x: scroll;

				@media screen and (min-width: get-breakpoint(tablet)) {
					margin-left: -(get-border());
				}
			}

			.stacked-list__item {
				flex: 1 0 props.stacked-list-item(large);
				max-width: props.stacked-list-item(large) * 2;

				&:nth-child(1n + 2) {
					margin-top: 0;
					margin-left: -(get-border(thin));

					@media screen and (min-width: get-breakpoint(tablet)) {
						margin-left: -(get-border());
					}
				}

				@media screen and (min-width: get-breakpoint(tablet)) {
					flex-basis: props.stacked-list-item(large, desktop);
					max-width: props.stacked-list-item(large, desktop) * 2;
				}
			}

			.draggable--original:first-child + .stacked-list__item {
				margin-left: 0;
			}

			.stacked-list__content {
				flex-direction: column;
				justify-content: center;
				text-align: center;

				&::before {
					top: -(get-border(thin));
					right: auto;
					bottom: -(get-border(thin));
					left: -(get-border(thin));
					width: get-border(thin);
					height: auto;

					@media screen and (min-width: get-breakpoint(tablet)) {
						top: -(get-border());
						bottom: -(get-border());
						left: -(get-border());
						width: get-border();
					}
				}
			}

			.DragHandle,
			.NopeHandle {
				margin-left: 0;
			}

			&.stacked-list__wrapper--medium {
				.stacked-list__header,
				.stacked-list__content {
					height: props.stacked-list-item(medium);

					@media screen and (min-width: get-breakpoint(tablet)) {
						height: props.stacked-list-item(medium, desktop);
					}
				}
			}

			&.stacked-list__wrapper--large {
				.stacked-list__header,
				.stacked-list__content {
					height: props.stacked-list-item(large);

					@media screen and (min-width: get-breakpoint(tablet)) {
						height: props.stacked-list-item(large, desktop);
					}
				}
			}
		}
	}

	&__item {
		&--draggable {
			cursor: get-cursor(drag);

			.stacked-list__content {
				background-color: white;
			}

			&:focus {
				outline: none;
			}

			&:focus,
			&:hover {
				.stacked-list__content {
					color: get-color(brand, blue);
				}

				+ .stacked-list__item {
					.stacked-list__content::before {
						background-color: get-color(brand, blue);
						opacity: 1;
					}
				}
			}

			&.draggable-source--is-dragging {
				.stacked-list__content {
					color: get-color(brand, blue);

					.Pattern--typeHalftone {
						@include pattern-halftone-animated;
					}
				}

				+ .stacked-list__item,
				+ .draggable--original + .stacked-list__item {
					// stylelint-disable-next-line selector-max-class
					.stacked-list__content::before {
						background-color: get-color(brand, blue);
						opacity: 1;
					}
				}
			}

			&.draggable-source--placed {
				.stacked-list__content {
					.Pattern--typePlaced {
						@include pattern-placed-animated;
					}
				}
			}

			&.draggable-mirror {
				z-index: get-z-index(overlay);
				transition: width get-duration() get-easing(bungie),
					height get-duration() get-easing(bungie);

				.stacked-list__content {
					height: 100%;
					color: white;
					background-color: get-color(brand, blue);
					border-color: get-color(brand, blue);
					transform: scale(1.025);

					&::before,
					&::after {
						display: none;
					}
				}

				.drag-handle {
					background-color: white;

					&::before,
					&::after {
						background-color: get-color(brand, blue);
					}
				}
			}
		}
	}
}
