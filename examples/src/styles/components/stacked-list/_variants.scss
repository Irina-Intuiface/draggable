@use '@src/components/StackedListItem/styles/props';
@use '@src/styles/theme';

.stacked-list__wrapper {
	.stacked-list__header,
	.stacked-list__item {
		height: map-get(props.$stacked-list-item-base, 'base');

		@media screen and (min-width: map-get(theme.$breakpoints, 'lg')) {
			height: map-get(props.$stacked-list-item-base, 'desktop');
		}
	}

	&--scroll-indicator {
		&::after {
			@include props.scroll-indicator;
		}

		&:hover {
			&::after {
				opacity: 0.1;
			}
		}
	}

	&--medium {
		.stacked-list__header,
		.stacked-list__item-content {
			height: map-get(props.$stacked-list-item-medium, 'base');
			@media screen and (min-width: map-get(theme.$breakpoints, 'lg')) {
				height: map-get(props.$stacked-list-item-medium, 'desktop');
			}
		}
	}

	&--large {
		.stacked-list__header,
		.stacked-list__item-content {
			height: map-get(props.$stacked-list-item-large, 'base');
			@media screen and (min-width: map-get(theme.$breakpoints, 'lg')) {
				height: map-get(props.$stacked-list-item-large, 'desktop');
			}
		}
	}

	&--scroll-indicator {
		.stacked-list__wrapper--medium & {
			@include props.stacked-list-scroll-height(10rem, 3);
		}

		.stacked-list__wrapper--large & {
			@include props.stacked-list-scroll-height(14.4rem, 3);
		}
	}

	&--horizontal {
		display: flex;

		&::after {
			@include props.scroll-indicator(false);
		}

		// does not address :focus on child elements
		&:hover {
			&::after {
				opacity: 0.1;
			}
		}

		.stacked-list__header {
			flex: 0 0 14.4rem;
		}

		.stacked-list {
			display: flex;
			flex: 1 1 auto;
			margin-top: 0;
			margin-left: -(map-get(theme.$borders, 'thin'));
			overflow-x: auto;

			@media screen and (min-width: map-get(theme.$breakpoints, 'md')) {
				margin-left: -(map-get(theme.$borders, 'base'));
			}
		}

		.stacked-list__item {
			flex: 1 0 14.4rem;
			height: auto;

			&:nth-child(1n + 2) {
				margin-top: 0;
				margin-left: -(map-get(theme.$borders, 'thin'));

				@media screen and (min-width: map-get(theme.$breakpoints, 'md')) {
					margin-left: -(map-get(theme.$borders, 'base'));
				}
			}
		}

		.stacked-list__item .stacked-list__item-content {
			flex-direction: column;
			justify-content: center;
			text-align: center;

			&::before {
				top: -(map-get(theme.$borders, 'thin'));
				right: auto;
				bottom: -(map-get(theme.$borders, 'thin'));
				left: -(map-get(theme.$borders, 'thin'));
				width: map-get(theme.$borders, 'thin');
				height: auto;

				@media screen and (min-width: map-get(theme.$breakpoints, 'md')) {
					top: -(map-get(theme.$borders, 'base'));
					bottom: -(map-get(theme.$borders, 'base'));
					left: -(map-get(theme.$borders, 'base'));
					width: map-get(theme.$borders, 'base');
				}
			}
		}

		.drag-handle,
		.nope-handle {
			margin-left: 0;
		}
	}
}
