@use '@src/components/StackedListItem/styles/props';
@use '@src/components/Pattern/styles/props' as pattern;
@use '@src/styles/theme';
@use '@src/styles/utils/shared/layout';
@use '@src/styles/utils/shared/functions';
@use 'variants';

.stacked-list {
	position: relative;
	margin-top: -(map-get(theme.$borders, 'thin'));

	&--scroll {
		@include props.stacked-list-scroll-height;
		overflow-y: scroll;
	}

	@media screen and (min-width: map-get(theme.$breakpoints, 'md')) {
		margin-top: -(map-get(theme.$borders, 'base'));
	}

	&__wrapper {
		@include pattern.stripes-bg;
		position: relative;
		color: map-get(theme.$colors, 'coal-dark');
		box-shadow: inset 0 0 0 map-get(theme.$borders, 'thin') currentColor;
		// `draggable-container-parent--capacity` changes the `color` on `stacked-listWrapper`...
		// This is supposed to "trickle" down and cause all children to transition color as well...
		// Problem is, sometimes these transitions seem to collide and we don't get syncronised timing...
		// Sadly, there is no way to target `box-shadow`'s color without the use of currentColor.
		// transition: color map-get(theme.$durations, 'fast') map-get(theme.$easings, 'base');

		@media screen and (min-width: map-get(theme.$breakpoints, 'md')) {
			box-shadow: inset 0 0 0 map-get(theme.$borders, 'base') currentColor;
		}
	}

	&__header {
		padding: map-get(theme.$spacings, 'tighter') + map-get(theme.$borders, 'thin');
		background-color: currentColor;
		transition: color map-get(theme.$durations, 'fast') map-get(theme.$easings, 'base');

		@media screen and (min-width: map-get(theme.$breakpoints, 'md')) {
			padding: map-get(theme.$spacings, 'tighter') + map-get(theme.$borders, 'base');
		}

		@media screen and (min-width: map-get(theme.$breakpoints, 'lg')) {
			height: map-get(props.$stacked-list-item-base, 'desktop');
		}

		p {
			margin-top: 0.2em;
			font-size: map-get(theme.$type-scales, 'paragraph-base');
			color: white;

			@media screen and (min-width: map-get(theme.$breakpoints, 'md')) {
				font-size: map-get(theme.$type-scales, 'paragraph-tablet');
			}

			@media screen and (min-width: map-get(theme.$breakpoints, 'lg')) {
				font-size: map-get(theme.$type-scales, 'paragraph-desktop');
			}
		}
	}

	&__item {
		&:nth-child(1n + 2) {
			margin-top: -(map-get(theme.$borders, 'thin'));

			@media screen and (min-width: map-get(theme.$breakpoints, 'md')) {
				margin-top: -(map-get(theme.$borders, 'base'));
			}
		}
	}
}
