@use 'props';

.Collidable {
	.block-layout--positioned {
		width: 100%;
		height: props.collidable(container-height);

		@media screen and (min-width: get-breakpoint(tablet)) {
			height: props.collidable(container-height, tablet);
		}

		@media screen and (min-width: get-breakpoint(desktop)) {
			height: props.collidable(container-height, desktop);
		}
	}

	.block--2,
	.block--3,
	.block__wrapper:nth-child(1),
	.block__wrapper:nth-child(4) {
		position: absolute;
		width: calc(50% - #{get-border(thin) * 2.5});

		@media screen and (min-width: get-breakpoint(tablet)) {
			width: calc(25% - #{get-border()});
		}
	}

	.block--2,
	.block--3 {
		height: props.collidable(obstacle-height);

		@media screen and (min-width: get-breakpoint(tablet)) {
			height: props.collidable(obstacle-height, tablet);
		}

		@media screen and (min-width: get-breakpoint(desktop)) {
			height: props.collidable(obstacle-height, desktop);
		}
	}

	.block--2 {
		top: props.collidable(container-padding);
		right: props.collidable(container-padding);

		@media screen and (min-width: get-breakpoint(tablet)) {
			top: props.collidable(container-padding, tablet);
			right: auto;
			left: calc(25% + #{props.collidable(container-padding, tablet)});
		}
	}

	.block--3 {
		bottom: props.collidable(container-padding);
		left: props.collidable(container-padding);

		@media screen and (min-width: get-breakpoint(tablet)) {
			bottom: props.collidable(container-padding, tablet);
			right: props.collidable(container-padding, tablet);
			left: auto;
		}
	}

	.block__wrapper:nth-child(1),
	.block__wrapper:nth-child(4) {
		height: props.collidable(block-height);

		@media screen and (min-width: get-breakpoint(tablet)) {
			height: props.collidable(block-height, tablet);
		}

		@media screen and (min-width: get-breakpoint(desktop)) {
			height: props.collidable(block-height, desktop);
		}
	}

	.block__wrapper:nth-child(1) {
		top: props.collidable(container-padding);
		left: props.collidable(container-padding);

		@media screen and (min-width: get-breakpoint(tablet)) {
			top: props.collidable(container-padding, tablet);
			left: props.collidable(container-padding, tablet);
		}
	}

	.block__wrapper:nth-child(4) {
		bottom: props.collidable(container-padding);
		right: props.collidable(container-padding);

		@media screen and (min-width: get-breakpoint(tablet)) {
			top: props.collidable(container-padding, tablet);
			right: props.collidable(container-padding, tablet);
			bottom: auto;
		}
	}

	///
	/// Walls
	.collidable-wall {
		position: absolute;
		background-color: get-color(coal, dark);
		transition: background-color get-duration() get-easing();
	}

	.collidable-wall--itemTop {
		top: 0;
		right: 0;
		left: 0;
		height: get-border(thin);

		@media screen and (min-width: get-breakpoint(tablet)) {
			height: get-border();
		}
	}

	.collidable-wall--itemRight {
		top: 0;
		right: 0;
		bottom: 0;
		width: get-border(thin);

		@media screen and (min-width: get-breakpoint(tablet)) {
			width: get-border();
		}
	}

	.collidable-wall--itemBottom {
		right: 0;
		bottom: 0;
		left: 0;
		height: get-border(thin);

		@media screen and (min-width: get-breakpoint(tablet)) {
			height: get-border();
		}
	}

	.collidable-wall--itemLeft {
		top: 0;
		bottom: 0;
		left: 0;
		width: get-border(thin);

		@media screen and (min-width: get-breakpoint(tablet)) {
			width: get-border();
		}
	}

	// Draggable
	.draggable-mirror {
		.BlockContent {
			transform: scale(0.9);
		}
	}

	.draggable-container--is-dragging:not(.draggable-container--over) {
		.Block--typeStripes {
			.BlockContent {
				color: get-color(brand, red);
			}
		}

		.collidable-wall {
			background-color: get-color(brand, red);
		}
	}

	// stylelint-disable-next-line no-duplicate-selectors
	.collidable-wall {
		&.isColliding {
			background-color: get-color(brand, red);
		}
	}
}
