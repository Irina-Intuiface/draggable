@use '@src/styles/utils/shared/functions';
@use '@src/styles/utils/shared/layout';
@use '@src/styles/theme';

@use '@src/components/Pattern/styles/props' as pattern;

$grid-area-names: a, b, c, d, e, f, g, h;
$grid-rows: 6;
$grid-columns: 4;

.block {
	&__wrapper {
		position: relative;

		&.draggable-dropzone--occupied {
			.block--hollow,
			.block--stripes {
				@include layout.position-cover;
			}
		}

		.block {
			height: 100%;
		}
	}

	&-layout {
		&--flex,
		&--float {
			margin-top: -(map-get(theme.$borders, 'thin'));
			margin-left: -(map-get(theme.$borders, 'thin'));

			> .block__wrapper {
				margin-top: map-get(theme.$borders, 'thin');
				margin-left: map-get(theme.$borders, 'thin');
			}

			> .block {
				padding-top: map-get(theme.$borders, 'thin');
				padding-left: map-get(theme.$borders, 'thin');
			}

			@media screen and (min-width: map-get(theme.$breakpoints, 'md')) {
				margin-top: -(map-get(theme.$borders, 'base'));
				margin-left: -(map-get(theme.$borders, 'base'));

				> .block__wrapper {
					margin-top: map-get(theme.$borders, 'base');
					margin-left: map-get(theme.$borders, 'base');
				}

				> .block {
					padding-top: map-get(theme.$borders, 'base');
					padding-left: map-get(theme.$borders, 'base');
				}
			}
		}

		&--flex {
			display: flex;
			flex-wrap: wrap;

			.block {
				flex: 1 1 100%;
			}
			.block__wrapper {
				flex: 1 1 calc(50% - #{map-get(theme.$layout-lengths, 'gutter-base')});

				@media screen and (min-width: map-get(theme.$breakpoints, 'sm')) {
					flex-basis: calc(25% - #{map-get(theme.$layout-lengths, 'gutter-base')});
				}

				.block__content {
					@media screen and (min-width: map-get(theme.$breakpoints, 'md')) {
						min-height: functions.rows(3);
					}

					@media screen and (min-width: map-get(theme.$breakpoints, 'lg')) {
						min-height: functions.rows(4);
					}
				}
			}
		}
		&--grid {
			display: grid;
			gap: map-get(theme.$borders, 'thin');
			margin-top: map-get(theme.$spacings, 'loose');

			grid-template-rows: repeat($grid-rows, 1fr);
			grid-template-columns: repeat($grid-columns, 1fr);
			grid-template-areas:
				'a a b b'
				'a a d d'
				'c c d d'
				'e e f f'
				'e e g g'
				'h h h h';

			@media screen and (min-width: map-get(theme.$breakpoints, 'md')) {
				// special fractions to line up with the flexContainer
				grid-template-columns: 1fr 1.025fr 1.025fr 1fr;
				grid-template-areas:
					'a c c g'
					'a c c g'
					'a d f g'
					'b d f g'
					'b e f h'
					'b e f h';
				border-width: map-get(theme.$borders, 'base');
			}

			@for $i from 1 through length($grid-area-names) {
				.block__wrapper:nth-child(#{$i}) {
					grid-area: nth($grid-area-names, $i);
				}
			}

			.block__wrapper .block__content {
				@media screen and (min-width: map-get(theme.$breakpoints, 'md')) {
					min-height: functions.rows(3, false, true);
				}

				@media screen and (min-width: map-get(theme.$breakpoints, 'lg')) {
					min-height: functions.rows(4, false, true);
				}
			}
		}

		&--positioned {
			position: relative;
		}
	}

	&--stripes {
		.block__content {
			&.colliding {
				color: map-get(theme.$colors, 'brand-red');
			}
		}
	}
}

.block-layout {
	.block__wrapper {
		.block:nth-child(1n + 3):not(.draggable-source--is-dragging) {
			min-height: 0;
			height: 0;
		}
	}
}
